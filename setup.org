#+TITLE: Sabin Pocris's Emacs
#+AUTHOR: Sabin Pocris
#+STARTUP: showeverything

* init.el
** Package manager
*** Melpa
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

*** use-package
#+begin_src emacs-lisp
  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

** UI 
*** Font
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist
	       '(font . "Anonymous Pro-23"))
#+end_src

*** Disable Features
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (setq initial-scratch-message ";; Happy Hacking")

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)          ; Disable the menu bar
#+end_src

*** Bell
#+begin_src emacs-lisp
  (setq visible-bell t)
#+end_src

*** macOS titlebar
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))
  (setq ns-use-proxy-icon  nil)
  (setq frame-title-format nil)
#+end_src

*** Scroll
#+begin_src emacs-lisp
  ;; Scroll one line at a time (less "jumpy" than defaults)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time
#+end_src

*** Mini Frame
#+begin_src emacs-lisp
  (use-package mini-frame
    :init
    (mini-frame-mode)
    :config
    (custom-set-variables
     '(mini-frame-show-parameters
       '((top . 1)
	 (width . 0.75)
	 (left . 0.5)))))
#+end_src

*** Yes or No, but Y
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

*** Extra
#+begin_src emacs-lisp
  ;; Removes *messages* from the buffer.
  (setq-default message-log-max nil)
  (kill-buffer "*Messages*")

  ;; Removes *Completions* from buffer after you've opened a file.
  (add-hook 'minibuffer-exit-hook
	    '(lambda ()
	       (let ((buffer "*Completions*"))
		 (and (get-buffer buffer)
		      (kill-buffer buffer)))))

  ;; Don't show *Buffer list* when opening multiple files at the same time.
  (setq inhibit-startup-buffer-menu t)

  ;; Show only one active window when opening multiple files at the same time.
  (add-hook 'window-setup-hook 'delete-other-windows)
#+end_src

*** Helpful
#+begin_src emacs-lisp
  (electric-pair-mode 1)
  (delete-selection-mode 1)

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))
#+end_src
** Backup
#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.myEmacsBackups")))
#+end_src

** Shortcuts
*** Kinda like 'o' from vim
#+begin_src emacs-lisp
  (defun newline-without-break-of-line ()
    "1. move to end of the line.
    2. insert newline with index"

    (interactive)
    (let ((oldpos (point)))
      (end-of-line)
      (newline-and-indent)))

  (global-set-key (kbd "<C-return>") 'newline-without-break-of-line)
#+end_src

*** ESC quits prompts
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** LSP
*** Autocomplete

**** corfu
#+begin_src emacs-lisp
  (use-package corfu
  ;; Optional customizations
  :custom
  ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  ;; (corfu-separator ?\s)          ;; Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  (corfu-quit-no-match 'separator)
  (corfu-auto-delay 0.25)
  (corfu-auto-prefix 3)
  ;;(corfu-echo-mode)
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin

  ;; Recommended: Enable Corfu globally.
  ;; This is recommended since Dabbrev can be used globally (M-/).
  :init
  (global-corfu-mode)
  (corfu-popupinfo-mode)
  (corfu-history-mode))
#+end_src

**** orderless
#+begin_src emacs-lisp
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
	  completion-category-defaults nil
	  completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src

**** cape
#+begin_src emacs-lisp
  (use-package cape
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :bind (("C-c p p" . completion-at-point) ;; capf
	   ("C-c p t" . complete-tag)        ;; etags
	   ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
	   ("C-c p h" . cape-history)
	   ("C-c p f" . cape-file)
	   ("C-c p k" . cape-keyword)
	   ("C-c p s" . cape-symbol)
	   ("C-c p a" . cape-abbrev)
	   ("C-c p l" . cape-line)
	   ("C-c p w" . cape-dict)
	   ("C-c p \\" . cape-tex)
	   ("C-c p _" . cape-tex)
	   ("C-c p ^" . cape-tex)
	   ("C-c p &" . cape-sgml)
	   ("C-c p r" . cape-rfc1345))
    :init
    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    ;; NOTE: The order matters!
    ;;(add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block)
    (add-to-list 'completion-at-point-functions #'cape-history)
    ;;RCS(add-to-list 'completion-at-point-functions #'cape-keyword)
    ;;(add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-dict)
    ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)
    )
#+end_src

*** Eglot
#+begin_src emacs-lisp
  (use-package eglot
    :config
    (add-hook 'prog-mode-hook #'eglot-ensure)

    ;; Undo the Eglot modification of completion-category-defaults
    (with-eval-after-load 'eglot
      (setq completion-category-defaults nil))

    ;; Enable cache busting, depending on if your server returns
    ;; sufficiently many candidates in the first place.
    (advice-add 'eglot-completion-at-point :around #'cape-wrap-buster))
#+end_src

** Themes
*** doom-themes
#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    ;;(load-theme 'doom-material-dark t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    ;;(doom-themes-neotree-config)
    ;; or for treemacs users
    ;;(setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    ;;(doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

*** doom-modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1))
  ;; :config (setq doom-modeline-height 21))
#+end_src

*** ef-themes
#+begin_src emacs-lisp
  (use-package ef-themes
    :config
    (load-theme 'ef-summer t))
#+end_src

** Ivy
#+begin_src emacs-lisp
  (use-package counsel
    :init
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    :config
    (global-set-key (kbd "C-s") 'swiper-isearch)
    (global-set-key (kbd "C-c a") 'swiper-all)
    (global-set-key (kbd "C-c s") 'counsel-rg)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "M-y") 'counsel-yank-pop)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-find-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "<f2> j") 'counsel-set-variable)
    (global-set-key (kbd "C-x b") 'ivy-switch-buffer)
    (global-set-key (kbd "C-c v") 'ivy-push-view)
    (global-set-key (kbd "C-c V") 'ivy-pop-view)
    (global-set-key (kbd "C-c n") 'counsel-fzf)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-c J") 'counsel-file-jump))

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))
#+end_src

** Languages
*** Web Dev
#+begin_src emacs-lisp
  (use-package web-mode
    :mode
    (
     "\\.html?\\'"
     "\\.php?\\'"
     )
    :config
    (setq web-mode-enable-auto-closing t
	  web-mode-enable-auto-opening t
	  web-mode-enable-auto-pairing t
	  web-mode-auto-close-style 2))
#+end_src

*** Rust
#+begin_src emacs-lisp
  (use-package rust-mode)
#+end_src

*** Treesitter
#+begin_src emacs-lisp
  (use-package tree-sitter
    :config
    (global-tree-sitter-mode)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

  (use-package tree-sitter-langs)
#+end_src

** Org
#+begin_src emacs-lisp
  (with-eval-after-load 'org       
    (setq org-startup-indented t) ; Enable `org-indent-mode' by default
    (add-hook 'org-mode-hook #'visual-line-mode))

  (use-package visual-fill-column
    :config
    ;;(setq visual-fill-column-width 100)
    (setq-default visual-fill-column-center-text t)
    (add-hook 'visual-line-mode-hook #'visual-fill-column-mode))

  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

** Terminal
#+begin_src emacs-lisp
  (use-package vterm)
#+end_src

** Screen Saver
#+begin_src emacs-lisp
  (require 'zone)
  (zone-when-idle 120) ;; in seconds
#+end_src
